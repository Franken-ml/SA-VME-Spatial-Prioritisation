#UPDATED: 14/11/2024
#Date: 02/11/2024
#Author: M Franken- Adapted from Dabal√† Alvise
################################################################################
#pacman::p_load(tidyverse, sf)
#setwd("D:/AAA_PhD/5SA_VME_SCP")
library(tidyverse)
library(sf)

#########################STEP 1: SETTING UP PLANNING UNIT###############################
#Read EEZ file
EEZ_SA <- st_read("Data/EEZ/eez.shp")

#Produce a grid
grid_PUs <- st_make_grid(EEZ_SA,
                         cellsize = c(0.1, 0.1)) %>% #cellsize set dimension of the grid
  st_sf()

#Plot
plot(grid_PUs)

#Intersect grid and EEZ
intersection <- st_intersects(grid_PUs, EEZ_SA) %>%
  lengths > 0

#Filter only PUs that intersect the EEZ
PUs <- grid_PUs %>%
  filter(intersection)

#Plot final PUs
plot(PUs)

#Save PUs
dir.create("Outputs/RDS/PUs/", recursive = TRUE) #Create the directory
saveRDS(PUs, "Outputs/RDS/PUs/PUs.rds")

#########################STEP 2: ADD DISTRIBUTION DATA###########################

#########################ADD VME INDICATOR RECORDS###############################
#Read the file
VMEs_Indicator_taxa <- st_read("Data/VMEs/VME_Indicator_Record.shp")

#Read PUs
PUs <- readRDS("Outputs/RDS/PUs/PUs.rds")

#Join the VMEs indicator taxa
PUs_VMEs_Indicator_taxa <- PUs %>%
  st_join(VMEs_Indicator_taxa) %>% #join based on geometry
  dplyr::select(VME_Type) %>% #select the column of interest
  filter(!is.na(VME_Type)) #filter all the values that are not NAs

#Create a column of presence-absence
PUs_VMEs_Indicator_taxa <- PUs_VMEs_Indicator_taxa %>%
  mutate(values = 1) #make a column of 1

#Report that in wider tibble
PUs_VMEs_Indicator_taxa <- PUs_VMEs_Indicator_taxa %>%
  pivot_wider(names_from = "VME_Type", #names of the columns
              values_from = "values",
              values_fn = sum) %>% #change to wide format
  rename_with(~paste0(., "_indicator"), #add indicator as a suffix
              colnames(.)[!grepl("geometry",
                                 colnames(.))])
#All the columns that are not geometry

print(PUs_VMEs_Indicator_taxa, n = "all")

dir.create("Outputs/RDS/PUs_features", recursive = TRUE)
saveRDS(PUs_VMEs_Indicator_taxa,
        "Outputs/RDS/PUs_features/PUs_VMEs_Indicator_taxa.rds")

plot(st_geometry(PUs_VMEs_Indicator_taxa), main="PUs with VME Indicator Taxa")  # Visualization
# Plot all Planning Units (PUs) with a light fill color
ggplot() +
  geom_sf(data = PUs, fill = "white", color = "lightgrey", size = 0.2) +
  geom_sf(data = PUs_VMEs_Indicator_taxa, fill = "red", color = "black", size = 0.2) +
  labs(title = "Planning Units with VME Indicator Taxa") +
  theme_minimal()

#Set targets
targets_VMEs_Indicator_taxa <- tibble(
  feature = (colnames(PUs_VMEs_Indicator_taxa) %>%
               setdiff("geometry")),
  target = 0.27
)

saveRDS(targets_VMEs_Indicator_taxa,
        "Outputs/RDS/Targets/targets_VMEs_Indicator_taxa.rds")

#########################ADD VME VISUAL RECORDS###############################
VMEs_visual_survey <- st_read("Data/VMEs/VME_Visual_Record.shp")

#Read PUs
PUs <- readRDS("Outputs/RDS/PUs/PUs.rds")

PUs_VMEs_visual_survey <- PUs %>%
  st_join(VMEs_visual_survey) %>%
  dplyr::select(VME_Type) %>%
  filter(!is.na(VME_Type))

#Create a column of presence-absence
PUs_VMEs_visual_survey <- PUs_VMEs_visual_survey %>%
  mutate(values = 1)

#Report that in wider tibble
PUs_VMEs_visual_survey <- PUs_VMEs_visual_survey %>%
  pivot_wider(names_from = "VME_Type",
              values_from = "values", values_fn = sum)

saveRDS(PUs_VMEs_visual_survey, "Outputs/RDS/PUs_features/PUs_VMEs_visual_survey.rds")

plot(st_geometry(PUs_VMEs_visual_survey), main="PUs with VME Visual Survey Records")  # Visualization
# Plot all Planning Units (PUs) with a light fill color
ggplot() +
  geom_sf(data = PUs, fill = "white", color = "lightgrey", size = 0.2) +  # All PUs in grey
  geom_sf(data = PUs_VMEs_visual_survey, fill = "red", color = "black", size = 0.2) +  # Selected grids in red
  labs(title = "Planning Units with VME Visual Survey Records") +
  theme_minimal()

#Set targets
targets_VMEs_visual_survey <- tibble(
  feature = (colnames(PUs_VMEs_visual_survey) %>%
               setdiff("geometry")),
  target = 0.81
)

saveRDS(targets_VMEs_visual_survey,
        "Outputs/RDS/Targets/targets_VMEs_visual_survey.rds")

targets_VMEs_visual_survey <- tibble(
  feature = (colnames(PUs_VMEs_visual_survey) %>%
               setdiff("geometry")),
  target = 0.81
)

saveRDS(targets_VMEs_visual_survey,
        "Outputs/RDS/Targets/targets_VMEs_visual_survey.rds")  # Fixed: Was saving wrong file

#########################ADD POTENTIAL VME VISUAL RECORDS###############################
PotentialVME_visual_survey <- st_read("Data/VMEs/PotentialVME_Visual_Record.shp")

#Read PUs
PUs <- readRDS("Outputs/RDS/PUs/PUs.rds")

PUs_PotentialVME_visual_survey <- PUs %>%
  st_join(PotentialVME_visual_survey) %>%
  dplyr::select(VME_Type) %>%
  filter(!is.na(VME_Type))

#Create a column of presence-absence
PUs_PotentialVME_visual_survey  <- PUs_PotentialVME_visual_survey %>%
  mutate(values = 1)

#Report that in wider tibble
PUs_PotentialVME_visual_survey  <- PUs_PotentialVME_visual_survey %>%
  pivot_wider(names_from = "VME_Type",
              values_from = "values", values_fn = sum)

saveRDS(PUs_PotentialVME_visual_survey, "Outputs/RDS/PUs_features/PUs_PotentialVME_visual_survey.rds")

plot(st_geometry(PUs_PotentialVME_visual_survey), main="PUs with Potential VME visual survey")  # Visualization
# Plot all Planning Units (PUs) with a light fill color
ggplot() +
  geom_sf(data = PUs, fill = "white", color = "lightgrey", size = 0.2) +  # All PUs in grey
  geom_sf(data = PUs_PotentialVME_visual_survey, fill = "red", color = "black", size = 0.2) +  # Selected grids in red
  labs(title = "Planning Units with Potential VME Visual Survey Records") +
  theme_minimal()

#Set targets
targets_PotentialVME_visual_survey <- tibble(
  feature = (colnames(PUs_PotentialVME_visual_survey) %>%
               setdiff("geometry")),
  target = 0.81
)

saveRDS(targets_PotentialVME_visual_survey,  # Fixed: Was saving wrong file
        "Outputs/RDS/Targets/targets_PotentialVME_visual_survey.rds")


#########################ADD VME CATCH RECORDS###############################
VMEs_catch <- st_read("Data/VMEs/VME_Catch_Record.shp")

#Read PUs
PUs <- readRDS("Outputs/RDS/PUs/PUs.rds")

#Intersect with the PUs
PUs_VMEs_catch <- PUs %>%
  st_join(VMEs_catch) %>%
  dplyr::select(VME_Type) %>%
  filter(!is.na(VME_Type))

#Create a column of presence-absence
PUs_VMEs_catch <- PUs_VMEs_catch %>%
  mutate(values = 1)

#Report that in wider tibble
PUs_VMEs_catch <- PUs_VMEs_catch %>%
  pivot_wider(names_from = "VME_Type",
              values_from = "values", values_fn = sum)

saveRDS(PUs_VMEs_catch, "Outputs/RDS/PUs_features/PUs_VMEs_catch.rds")

plot(st_geometry(PUs_VMEs_catch), main="PUs with VME Catch")  # Visualization
# Plot all Planning Units (PUs) with a light fill color
ggplot() +
  geom_sf(data = PUs, fill = "white", color = "lightgrey", size = 0.2) +  # All PUs in grey
  geom_sf(data = PUs_VMEs_catch, fill = "red", color = "black", size = 0.2) +  # Selected grids in red
  labs(title = "Planning Units with VME Catch Records") +
  theme_minimal()

targets_VMEs_catch <- tibble(
  feature = (colnames(PUs_VMEs_catch) %>%
               setdiff("geometry")),
  target = 0.54
) %>%
  mutate(target = if_else(feature == "Suberites_VME_catch", 0.36, 0.54))

saveRDS(targets_VMEs_catch,
        "Outputs/RDS/Targets/targets_VMEs_catch.rds")



#########################ADD VME SONAR RECORDS###############################
#EXLUDE FOR NOW#
#VMEs_sonar <- st_read("Data/VMEs/Coral_Mounds.shp")

#Read PUs
#PUs <- readRDS("Outputs/RDS/PUs/PUs.rds")

#Intersect with the PUs
#PUs_VMEs_sonar <- PUs %>%
#  st_join(VMEs_sonar) %>%
#  dplyr::select(Feature) %>%
#  filter(!is.na(Feature))

#Create a column of presence-absence
#PUs_VMEs_sonar <- PUs_VMEs_sonar %>%
#  mutate(values = 1)

#Report that in wider tibble
#PUs_VMEs_sonar <- PUs_VMEs_sonar %>%
#  pivot_wider(names_from = "Feature",
#              values_from = "values", values_fn = sum)

#saveRDS(PUs_VMEs_sonar, "Outputs/RDS/PUs_features/PUs_VMEs_sonar.rds")

#plot(st_geometry(PUs_VMEs_sonar), main="PUs with VME Sonar")  # Visualization
# Plot all Planning Units (PUs) with a light fill color
#ggplot() +
#  geom_sf(data = PUs, fill = "white", color = "lightgrey", size = 0.2) +  # All PUs in grey
#  geom_sf(data = PUs_VMEs_sonar, fill = "red", color = "black", size = 0.2) +  # Selected grids in red
#  labs(title = "Planning Units with VME Sonar") +
# theme_minimal()

#Set targets
#targets_VMEs_catch <- tibble(
#  feature = (colnames(PUs_VMEs_sonar) %>%
#               setdiff("geometry")),
#  target = 0.81)

# saveRDS(targets_VMEs_catch, "Outputs/RDS/Targets/targets_VMEs_sonar.rds")




#########################STEP 3: GROUP FEATURES###############################

library(sf)
library(dplyr)
library(future.apply)

# Read PUs
PUs <- readRDS("Outputs/RDS/PUs/PUs.rds")

# Read intersection VMEs
name_files <- list.files("Outputs/RDS/PUs_features/", pattern = ".rds$", full.names = TRUE)

# Join all the features in the folder to the PUs
PUs_all_features <- future_lapply(name_files, function(name_file) {
  PUs_features_tibble <- readRDS(name_file)  # Read the file

  # Ensure the spatial extent matches PUs
  PUs_features_tibble <- st_join(PUs, PUs_features_tibble)

  return(PUs_features_tibble)
}) %>%
  dplyr::bind_rows()  # Use dplyr::bind_rows to concatenate the results

# Identify numeric and character columns
numeric_cols <- sapply(PUs_all_features, is.numeric)
character_cols <- sapply(PUs_all_features, is.character)


#Transform all the NAs to 0
PUs_all_features <- PUs_all_features %>% 
  mutate(
    across(everything(), ~replace_na(.x, 0)) #replace all the NAs with zero
  )

# Save the updated dataset
saveRDS(PUs_all_features, "Outputs/RDS/PUs/PUs_all_features.rds")

#########################STEP 4: COST LAYER###############################
#Read PUs
PUs_all_features <- readRDS("Outputs/RDS/PUs/PUs_all_features.rds")

#read cost
cost <- st_read("Data/cost/iAtl_Cost_Kerry.shp")

#intersect the cost with the PUs
intersection <- PUs_all_features %>%
  st_transform(st_crs(cost)) %>% #project to the cost CRS
  st_intersects(cost)

#calculate the total cost in each PU
total_cost_per_PU <- future_lapply(1:length(intersection), function(i) {
  sum(cost$iA3_xP_CST[intersection[[i]]]) #total value of cost in each PU
}) %>%
  unlist()

#Mutate to cost
PUs_all_features_cost <- PUs_all_features %>%
  mutate(cost = total_cost_per_PU) %>%
  filter(!is.na(cost)) #remove PUs that do not intersect the cost layer

plot(PUs_all_features_cost[, "cost"])

#Save
saveRDS(PUs_all_features_cost, "Outputs/RDS/PUs/PUs_all_features_cost.rds")

st_write(PUs_all_features_cost, "Outputs/shp/PUs/PUs_all_features_cost.shp",
         append = FALSE)

#########################STEP 5: RUN PrioritizeR###############################

# Load required packages
library(gurobi)
library(prioritizr)
library(tidyverse)
library(sf)
library(future.apply)

# Read PUs
PUs_all_features_cost <- readRDS("Outputs/RDS/PUs/PUs_all_features_cost.rds")

# Get feature names
names_features <- PUs_all_features_cost %>%
  names() %>%
  setdiff(c("geometry", "cost"))

# Load targets
targets_files_names <- list.files("Outputs/RDS/Targets/", full.names = TRUE) %>%
  lapply(readRDS) %>%
  bind_rows()

# Diagnostic prints
print(paste("Number of features:", length(names_features)))
print(paste("Number of targets:", nrow(targets_files_names)))


#Minimum set objective problem
problem_01 <- problem(PUs_all_features_cost, 
                      features = names_features, cost_column = "cost") %>% 
  add_relative_targets(targets_files_names$target) %>% 
  add_min_set_objective() %>% 
  add_gurobi_solver(gap = 0.1, threads = 4)

solution_01 <- solve(problem_01, force = TRUE)
plot(solution_01[, "solution_1"])
plot(solution_01[, "solution_1"], main = "solution_01")

#Add boundary penalty
problem_02 <- problem_01 %>% 
  add_boundary_penalties(penalty = 0.01, edge_factor = 0.5)
#penalty 

solution_02 <- solve(problem_02, force = TRUE)

plot(solution_02[, "solution_1"])
plot(solution_02[, "solution_1"], main = "solution_02")


#Create a portfolio of solutions
problem_03 <- problem_02 %>% 
  add_gap_portfolio(pool_gap = 0.5, number_solutions = 5)

solution_03 <- solve(problem_03, force = TRUE)

plot(solution_03[, c("solution_1", "solution_2",
                     "solution_3", "solution_4", 
                     "solution_5")], max.plot = 10)

#Evaluation results
eval_cost_summary(problem_01, solution_01[, "solution_1"]) #cost
eval_cost_summary(problem_02, solution_02[, "solution_1"]) #cost

eval_boundary_summary(problem_01, solution_01[, "solution_1"])
eval_boundary_summary(problem_02, solution_02[, "solution_1"])

eval_target_coverage_summary(problem_01, solution_01[, "solution_1"]) %>% #targets
  print(n = "all")
eval_target_coverage_summary(problem_02, solution_02[, "solution_1"]) %>% #targets
  print(n = "all")

#Calculate replacement score
replacemant_score <- eval_replacement_importance(problem_01, 
                                                 solution_01[, "solution_1"], 
                                                 force = TRUE)


